// Generated by CoffeeScript 1.4.0
(function() {
  var PlistNode, PlistParser;

  PlistNode = (function() {

    function PlistNode(type, parent) {
      if (parent == null) {
        parent = null;
      }
      this.type = type;
      this.key = null;
      this.value = null;
      this.parent = parent;
      this.children = [];
      return this;
    }

    PlistNode.prototype.addChild = function(node) {
      node.parent = this;
      this.children.push(node);
      return node;
    };

    PlistNode.prototype.getParent = function() {
      if (this.parent) {
        return this.parent;
      }
      return this;
    };

    PlistNode.prototype.convert = function() {
      var child, iterable, _i, _j, _len, _len1, _ref, _ref1;
      if (!this.children.length) {
        if (this.type === 'integer') {
          return parseInt(this.value, 10);
        } else if (this.type === 'string') {
          return this.value;
        } else if (this.type === 'date') {
          try {
            return new Date(this.value);
          } catch (e) {
            return null;
          }
        } else if (this.type === 'true') {
          return true;
        } else if (this.type === 'false') {
          return false;
        } else if (this.type === 'real') {
          return parseFloat(this.value);
        } else if (this.type === 'data') {
          return this.value;
        } else if (this.type === 'dict') {
          return {};
        } else if (this.type === 'array') {
          return [];
        }
      } else {
        if (this.type === 'dict') {
          iterable = {};
          _ref = this.children;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            child = _ref[_i];
            if (child.key) {
              iterable[child.key] = child.convert();
            }
          }
        } else if (this.type === 'array') {
          iterable = [];
          _ref1 = this.children;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            child = _ref1[_j];
            iterable.push(child.convert());
          }
        }
      }
      return iterable;
    };

    return PlistNode;

  })();

  PlistParser = (function() {

    function PlistParser(xml, opts) {
      var _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (opts == null) {
        opts = null;
      }
      if (!(typeof sax !== "undefined" && sax !== null)) {
        return new Error('Missing required dependency: sax-js (https://github.com/isaacs/sax-js)');
      }
      this.sax = sax;
      this.xml = xml;
      this.traverser = null;
      this.last = {
        'parent': null,
        'node': null,
        'key': null,
        'tag': null,
        'value': null
      };
      this.error = null;
      this.opts = {
        'processors': {
          'string': (_ref = opts != null ? (_ref1 = opts.processors) != null ? _ref1.string : void 0 : void 0) != null ? _ref : null,
          'date': (_ref2 = opts != null ? (_ref3 = opts.processors) != null ? _ref3.date : void 0 : void 0) != null ? _ref2 : null,
          'true': (_ref4 = opts != null ? (_ref5 = opts.processors) != null ? _ref5["true"] : void 0 : void 0) != null ? _ref4 : null,
          'false': (_ref6 = opts != null ? (_ref7 = opts.processors) != null ? _ref7["false"] : void 0 : void 0) != null ? _ref6 : null,
          'real': (_ref8 = opts != null ? (_ref9 = opts.processors) != null ? _ref9.real : void 0 : void 0) != null ? _ref8 : null,
          'data': (_ref10 = opts != null ? (_ref11 = opts.processors) != null ? _ref11.data : void 0 : void 0) != null ? _ref10 : null,
          'dict': (_ref12 = opts != null ? (_ref13 = opts.processors) != null ? _ref13.dict : void 0 : void 0) != null ? _ref12 : null,
          'array': (_ref14 = opts != null ? (_ref15 = opts.processors) != null ? _ref15.array : void 0 : void 0) != null ? _ref14 : null
        }
      };
      return this;
    }

    PlistParser.prototype.validate = function() {
      var parser,
        _this = this;
      parser = this.sax.parser(true);
      parser.onopentag = function(node) {
        if (!this.first) {
          this.first = true;
          if (node.name !== 'plist') {
            return this.error = new Error('Invalid Property List contents (<plist> missing)');
          }
        }
      };
      parser.ondoctype = function(doctype) {
        if (doctype !== ' plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"') {
          return _this.error = new Error('Invalid Property List DOCTYPE');
        }
      };
      parser.onerror = function(error) {
        return _this.error = error;
      };
      parser.write(this.xml).close();
      if (this.error) {
        return false;
      }
      return true;
    };

    PlistParser.prototype.parse = function() {
      var parser,
        _this = this;
      parser = this.sax.parser(true);
      parser.onopentag = function(node) {
        if (node.name === 'plist') {
          return;
        } else if (node.name === 'key') {
          _this.last.key = null;
          return;
        }
        if (!_this.traverser) {
          _this.traverser = _this.last.node = new PlistNode(node.name);
          return;
        }
        _this.last.node = _this.traverser.addChild(new PlistNode(node.name));
        if (_this.last.key) {
          _this.last.node.key = _this.last.key.valueOf();
          _this.last.key = null;
        }
        if ((node.name === 'dict') || (node.name === 'array')) {
          return _this.traverser = _this.last.node;
        }
      };
      parser.ontext = function(text) {
        return _this.last.value = text;
      };
      parser.onclosetag = function(name) {
        if ((name === 'dict') || (name === 'array')) {
          return _this.traverser = _this.traverser.getParent();
        } else if (name === 'key') {
          if (_this.last.value) {
            _this.last.key = _this.last.value.valueOf();
            return _this.last.value = null;
          }
        } else {
          if (_this.last.value) {
            return _this.last.node.value = _this.last.value.valueOf();
          }
        }
      };
      parser.write(this.xml).close();
      return this.traverser.convert();
    };

    return PlistParser;

  })();

  window.PlistParser = PlistParser;

}).call(this);
