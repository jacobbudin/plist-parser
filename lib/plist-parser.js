// Generated by CoffeeScript 1.4.0
(function() {
  var PlistArray, PlistDict, PlistIterable, PlistParser,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Object.prototype.inject = function(path, value) {
    var param, path_copy;
    path_copy = path.slice();
    param = path_copy.pop();
    if (path_copy.length > 1) {
      return this[param].setByArray(path_copy, value);
    } else {
      this[param] = value;
    }
  };

  PlistParser = (function() {

    function PlistParser(sax, xml) {
      this.sax = sax;
      this.plist = {};
      this.branches = [];
      this.parents = [];
      this.last = {};
      return this.__parse(xml);
    }

    PlistParser.prototype.__parse = function(xml) {
      var parser,
        _this = this;
      parser = this.sax.parser(true);
      parser.onopentag = function(node) {
        if (node.name === 'dict') {
          return _this.branches.push(new PlistDict(_this.__frame({})));
        } else if (node.name === 'array') {
          return _this.branches.push(new PlistArray(_this.__frame([])));
        } else {
          return _this.last.tag = node.name;
        }
      };
      parser.ontext = function(text) {
        return _this.last.value = text;
      };
      parser.onclosetag = function(name) {
        var last_branch_index;
        if (name === 'dict') {
          return _this.__inject('dict');
        } else if (name === 'array') {
          return _this.__inject('array');
        } else if (name === 'key') {
          return _this.last.key = _this.last.value;
        } else {
          if (!_this.branches.length) {
            return;
          }
          last_branch_index = _this.branches.length - 1;
          if (_this.last.key) {
            _this.branches[last_branch_index].add(_this.last.key, _this.last.tag, _this.last.value);
            return _this.last.key = null;
          } else {
            return _this.branches[last_branch_index].add(_this.last.tag, _this.last.value);
          }
        }
      };
      parser.write(xml).close();
      return this.plist;
    };

    PlistParser.prototype.__frame = function(empty) {
      if (!this.last.key) {
        return;
      }
      this.parents.push(this.last.key);
      this.plist.inject(this.parents, empty);
      this.last.key = null;
      return this.parents.slice();
    };

    PlistParser.prototype.__inject = function(type) {
      var branch, i, p, plist, _i, _len, _ref;
      branch = this.branches.pop();
      plist = this.plist;
      _ref = branch.parents;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        p = _ref[i];
        plist = plist[p];
      }
      this.plist.inject(branch.parents, branch.contents);
      return this.parents.pop();
    };

    return PlistParser;

  })();

  PlistIterable = (function() {

    function PlistIterable(parents) {
      if (parents == null) {
        parents = [];
      }
      this.parents = parents;
    }

    PlistIterable.prototype.add = function(name, value) {
      if (name === 'integer') {
        return parseInt(value, 10);
      } else if (name === 'string') {
        return value;
      } else if (name === 'date') {
        return value;
      } else if (name === 'true') {
        return true;
      } else if (name === 'false') {
        return false;
      }
    };

    return PlistIterable;

  })();

  PlistDict = (function(_super) {

    __extends(PlistDict, _super);

    function PlistDict(parents) {
      PlistDict.__super__.constructor.call(this, parents);
      this.contents = {};
    }

    PlistDict.prototype.add = function(key, name, value) {
      return this.contents[key] = PlistDict.__super__.add.call(this, name, value);
    };

    return PlistDict;

  })(PlistIterable);

  PlistArray = (function(_super) {

    __extends(PlistArray, _super);

    function PlistArray(parents) {
      PlistArray.__super__.constructor.call(this, parents);
      this.contents = [];
    }

    PlistArray.prototype.add = function(name, value) {
      return this.contents.push(PlistArray.__super__.add.call(this, name, value));
    };

    return PlistArray;

  })(PlistIterable);

  window.PlistParser = PlistParser;

}).call(this);
